# Copyright 2016 Trimble Navigation Limited
# Licensed under the MIT license

require 'sketchup.rb'
require 'set'

class Object
  def tap
    yield self
    self
  end
  
  def tputs(prefix = nil)
	puts "#{prefix.nil? ? '' : prefix + '='}#{self.inspect}"
	self
  end
end

module Ittay
  module ScaledDimensions
	class ScaledDimensionsTool 
		
		class Base
			def draw(view)
			end
			
			def onLButtonDown(flags, x, y, view)
				self
			end
			
			def onMouseMove(flags, x, y, view)
				self
			end
			
			def onLButtonUp(flags, x, y, view)
				self
			end
			
			def grep_recursion(entities, what, arr)
				if entities.nil?
				  # empy on purpose
				else
				  entities.each do |entity|
					if what === entity
						arr.push(entity)
					end
					if entity.is_a? Sketchup::Group
						grep_recursion(entity.entities, what, arr)
					end
					if entity.is_a? Sketchup::ComponentInstance
						grep_recursion(entity.definition.entities, what, arr)
					end
				  end
				end
				arr
			end
		end
		class Initial < Base
			def initialize
				sel = Sketchup.active_model.selection
				sel.clear
				sel.add(grep_recursion(Sketchup.active_model.selection, Sketchup::DimensionLinear, []))
			end
			def onLButtonDown(flags, x, y, view)
				@start = Geom::Point3d.new(x,y, 0)
				self
			end
			def onMouseMove(flags, x, y, view)
				@start.nil? ? self : Drag.new(flags, x, y, view, @start);
			end
			def onLButtonUp(flag, x, y, view, selection_state)
				# where here if the mouse didn't move much
				ph = view.pick_helper
				ph.do_pick(x, y)
				picked = grep_recursion([ph.best_picked], Sketchup::DimensionLinear, [])
				selection = view.model.selection
				case selection_state
					when :add then selection.add(picked)
					when :replace 
						selection.clear
						selection.add(picked)
					when :remove then selection.remove(picked)
					when :toggle
						add = picked - selection.to_a
						selection.remove(picked)
						selection.add(add)
						
						
				end
				@start = nil
				self
			end
			
		end
		
		class Drag < Base
			def initialize(flags, x, y, view, start)
				@start = start
				@current = Geom::Point3d.new(x, y, 0)
				view.invalidate
			end
			
			def onMouseMove(flags, x, y, view)
				@current = Geom::Point3d.new(x, y, 0)
				view.invalidate
				self
			end
			
			def onLButtonUp(flag, x, y, view, selection_state)
				ph = view.pick_helper
				num_picked = ph.window_pick(@start, @current, @start.x < @current.x ? Sketchup::PickHelper::PICK_INSIDE : Sketchup::PickHelper::PICK_CROSSING)
				arr = grep_recursion(ph.all_picked, Sketchup::DimensionLinear, [])
				Sketchup.active_model.selection.add(arr)
				view.invalidate
				Initial.new
			end
			
			def draw(view)
				points = [
				  Geom::Point3d.new(@start.x, @start.y, 0),
				  Geom::Point3d.new(@start.x, @current.y, 0),
				  Geom::Point3d.new(@current.x, @current.y, 0),
				  Geom::Point3d.new(@current.x, @start.y, 0),
				  Geom::Point3d.new(@start.x, @start.y, 0)
				]
				view.draw2d(GL_LINE_STRIP, points)
			end
			
			
		end
		
		def initialize
			
			@cursors = {:replace => cursor('Select.png', 3, 8), 
				:toggle => cursor('Select_Toggle.png', 3, 8),
				:add => cursor('Select_Add.png', 3, 8),
				:remove => cursor('Select_Remove.png', 3, 8)}

			@selection_flags = 0
		end
		 
		def activate 
			@state = Initial.new
		end
		
		def enableVCB?
			true
		end
		
		def onLButtonDown(flags, x, y, view)
			puts '%32b' % flags
			@state = @state.onLButtonDown(flags, x, y, view)
		end
		def onMouseMove(flags, x, y, view)
			@state = @state.onMouseMove(flags, x, y, view)
		end
	    def onLButtonUp(flags, x, y, view)
			@state = @state.onLButtonUp(flags, x, y, view, @@selection_states[@selection_flags])
		end
		
		def draw(view)
			@state.draw(view)
		end
		
		
		def onKeyDown(key, repeat, flags, view)			
		  setCursor(:down, key, repeat, flags, view)
		end
		
		def onKeyUp(key, repeat, flags, view)
		  setCursor(:up, key, repeat, flags, view)
		end
		
		@@selection_states = {0 => :replace, 
				CONSTRAIN_MODIFIER_MASK => :toggle,
				COPY_MODIFIER_MASK => :add,
				CONSTRAIN_MODIFIER_MASK | COPY_MODIFIER_MASK => :remove}
				
		
		@@keymap = {CONSTRAIN_MODIFIER_KEY => CONSTRAIN_MODIFIER_MASK, COPY_MODIFIER_KEY => COPY_MODIFIER_MASK}
		@@keymap.default = 0
		
		def setCursor(what, key, repeat, flags, view)
					puts @selection_flags

			@selection_flags = what == :up ? (~(@@keymap[key]) & @selection_flags) : (@@keymap[key] | @selection_flags)
			onSetCursor()
		end

		def onSetCursor
			UI.set_cursor(@cursors[@@selection_states[@selection_flags]])
		end	

		def cursor(file, x = 0, y = 0)
			cursor_path = File.join(File.dirname(__FILE__), 'Cursors')
			UI.create_cursor(File.join(cursor_path, file), x, y)
		end
		
		def suspend(view) 
			puts 'suspend'
		end
		def resume(view)
			puts 'resume'
		end
	end

    def self.scale_dialog()
		input = UI.inputbox(["Scale?"], [""], "Enter scale")
		return nil unless input
		return input[0].to_f
	end 
	
	def self.valid(point) 
		point[0].nil? ? point[1] : point
	end
	  
	def self.scale_dimensions

      # We need a reference to the currently active model. The SketchUp API
      # currently only let you work on the active model. Under Windows there
      # will be only one model open at a time, but under OS X there might be
      # multiple models open.
      # 
      # Beware that if there is no model open under OS X then `active_model`
      # will return nil. In this example we ignore that for simplicity.
      model = Sketchup.active_model

      # Whenever you make changes to the model you must take care to use
      # `model.start_operation` and `model.commit_operation` to wrap everything
      # into a single undo step. Otherwise the user risk not being able to undo
      # everything and loose work.
      # 
      # Making sure your model changes is undoable in a single undo step is a
      # requirement of the Extension Warehouse submission quality checks.
      # 
      # Note that the first argument name is a string that will be appended to
      # the Edit > Undo menu - so make sure you name your operations something
      # the users can understand.
  	 
      model.start_operation('Create Scaled Dim', true)

	  scale = scale_dialog()
	  
	  model.selection.grep(Sketchup::DimensionLinear).each do |dim|
		puts "Scaling #{dim}" if @debug
	    dim.set_attribute('scaling', 'scale', scale)
		dim.set_attribute('scaling', 'parent_scale', dim.parent.bounds.diagonal)
		
		start_updating(dim)
	  end
	  
	  self.init_timer
	  
      # Finally we are done and we close the operation. In production you will
      # want to catch errors and abort to clean up if your function failed.
      # But for simplicity we won't do this here.
      model.commit_operation
    end
	
	def self.start_updating(dim) 
		@scaled_dims.add(dim)
	end 
	
	def self.debug=(enable)
		@debug = enable
	end
	
	def self.update_scaled_dims 
		model = Sketchup.active_model
		@scaled_dims.delete_if do |dim|
			dim.deleted? || dim.get_attribute('scaling', 'scale').nil?
		end

		scaled = @scaled_dims.map do |dim| 
			# Sketchup has a bug in which dimensions for scaled groups return text that is different than what actually is displayed. So can't rely on dim.text
			# current = dim.text
			current = dim.get_attribute('scaling', 'text')
			scale = dim.get_attribute('scaling', 'scale').to_f
			parent_scale = dim.get_attribute('scaling', 'parent_scale').to_f / dim.parent.bounds.diagonal
			#dim.text = ''
			distance = dim.end[1].distance_to_line([dim.start[1], dim.offset_vector])
			scaled = (distance * parent_scale * scale).to_l.to_s.sub('~ ', '') # (dim.start[1].distance(dim.end[1]).to_f * scale).to_l.to_s
			puts "#{distance.to_s.to_l.to_s} * #{parent_scale} * #{scale} = #{scaled}. Current=#{current}"  if @debug
			#puts "(#{dim.parent.instances[0]}, #{dim.parent.instances[0].scaled_size}, #{dim.parent.instances[0].unscaled_size})"
			#puts "(#{dim.parent.instances[0].parent}, #{dim.parent.instances[0].scaled_size}, #{dim.parent.instances[0].unscaled_size})"
			[dim, scaled] if scaled != current
		end.compact
		
		if scaled.any? 
			model.start_operation('Update Scaled Dim', true)
			scaled.each do |dim, scaled|
				# If the dimension is of a scaled group, say by 2, and the dimension says 10, then the dim.text method may return 5 (dimension before scale)
				# so if I scale the dimension, the scale is 5, but setting the text to 5 will make SU think nothing changed, so won't update the text property
				# and the dimension will still show 10.
				dim.text = 'bug' 
				dim.text = scaled
				dim.set_attribute('scaling', 'text', scaled)
			end
			model.commit_operation

		end
		model.selection.add()
	end
	
	def self.init_scaled_dims 
		
		@scaled_dims = Set.new
		
		model = Sketchup.active_model
	  
		model.entities.grep(Sketchup::DimensionLinear).each do |dim|
			if dim.get_attribute('scaling', 'scale')
				start_updating(dim)
			end
		end
	end
	
	def self.stop_timer
		UI.stop_timer(@timer)
		@timer = nil
	end
	
	def self.init_timer 
	  @timer ||= UI.start_timer(3, true) do 
		begin
			self.update_scaled_dims
		rescue 
			stop_timer
			raise 
		end
	  end
	end
	
	def self.offset_dim_by_edge
		ss = Sketchup.active_model.selection
		dim = ss.find{|e| e.class == Sketchup::DimensionLinear}
		edge = ss.find{|e| e.class == Sketchup::Edge}
		
		dim.offset_vector = edge.line[1]
	end
	
	def self.initialize_menu(menu) 
	  menu = menu.add_submenu("Ittay's")
	  
	  menu.add_item('Scale Dimension') {self.scale_dimensions}
	  
 	  menu.add_item('Offset Dimension by Edge') {self.offset_dim_by_edge}
	  
	  menu.add_item('Test') {Sketchup.active_model.select_tool(ScaledDimensionsTool.new)}

	end
	
	def self.init_context_menu(menu)
		sel = Sketchup.active_model.selection.first
		return if not sel
		menu.add_separator
		initialize_menu(menu)
	end
	
	
    # Here we add a menu item for the extension. Note that we again use a
    # load guard to prevent multiple menu items from accidentally being
    # created.
	
    unless file_loaded?(__FILE__)
	  
	  self.init_scaled_dims

	  
	  self.init_timer

	  
      # We fetch a reference to the top level menu we want to add to. Note that
      # we use "Plugins" here which was the old name of the "Extensions" menu.
      # By using "Plugins" you remain backwards compatible.
      menu = UI.menu('Plugins')
	  
	  initialize_menu(menu)	  
	  UI.add_context_menu_handler(&(method(:init_context_menu)))

      file_loaded(__FILE__)
    end

  end # module 
end # module 
